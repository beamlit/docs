components:
  schemas:
    ACL:
      type: object
      description: ACL
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - properties:
          id:
            type: string
            description: ACL id
          resource_id:
            type: string
            description: Resource ID
          resource_type:
            type: string
            description: Resource type
          role:
            type: string
            description: Role
          subject_id:
            type: string
            description: Subject ID
          subject_type:
            type: string
            description: Subject type
          workspace:
            type: string
            description: Workspace name
    Agent:
      type: object
      description: Agent
      properties:
        metadata:
          $ref: '#/components/schemas/EnvironmentMetadata'
        spec:
          $ref: '#/components/schemas/AgentSpec'
        status:
          $ref: '#/components/schemas/CoreStatus'
    AgentChain:
      type: object
      description: Agent chain configuration
      properties:
        description:
          type: string
          description: Description of the agent in case you want to override the default
            one
        enabled:
          type: boolean
          description: Whether the agent chain is enabled
        name:
          type: string
          description: The name of the agent to chain to
    AgentChains:
      type: array
      description: Agent chain
      items:
        $ref: '#/components/schemas/AgentChain'
    AgentHistory:
      type: object
      description: Agent deployment history
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - properties:
          agent:
            type: string
            description: Agent name
          end:
            type: string
            description: End time
          environment:
            type: string
            description: Environment name
          events:
            type: array
            description: Events
            items:
              $ref: '#/components/schemas/AgentHistoryEvent'
          request_id:
            type: string
            description: Request ID
          start:
            type: string
            description: Start time
          status:
            type: string
            description: 'Status, eg: running, success, failed'
          took:
            type: integer
            description: Number of milliseconds it took to complete the event
          workspace:
            type: string
            description: The workspace the agent deployment belongs to
    AgentHistoryEvent:
      type: object
      description: Agent deployment history event
      properties:
        end:
          type: string
          description: End time
        error:
          type: string
          description: Error message
        name:
          type: string
          description: Name of the function or agent
        parameters:
          type: string
          description: Parameters
        start:
          type: string
          description: Start time
        status:
          type: string
          description: 'Status, eg: running, success, failed'
        subFunction:
          type: string
          description: Function used in kit if a kit was used
        took:
          type: integer
          description: Number of milliseconds it took to complete the event
        type:
          type: string
          description: Type, one of function or agent
    AgentMetadata:
      allOf:
      - $ref: '#/components/schemas/Metadata'
      - properties:
          environment:
            description: Environment name
            type: string
      description: Agent metadata
      type: object
    AgentRelease:
      type: object
      description: Agent release, used to deploy a agent from one environment to another
      properties:
        from:
          type: string
          description: Origin environment from which the agent is released
        to:
          type: string
          description: Destination environment to which the agent is released
    AgentSpec:
      type: object
      description: Agent specification
      allOf:
      - $ref: '#/components/schemas/CoreSpec'
      - properties:
          agentChain:
            $ref: '#/components/schemas/AgentChains'
          description:
            type: string
            description: Agent description
          functions:
            $ref: '#/components/schemas/FunctionsList'
          model:
            type: string
            description: Model name
          storeId:
            type: string
            description: Store id
    ApiKey:
      type: object
      description: Long-lived API key for accessing Beamlit
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          apiKey:
            type: string
            description: Api key
          expires_in:
            type: string
            description: Duration until expiration (in seconds)
          id:
            type: string
            description: Api key id, to retrieve it from the API
          name:
            type: string
            description: Name for the API key
          sub:
            type: string
            description: User subject identifier
          sub_type:
            type: string
            description: Subject type
    ArrayMetric:
      type: array
      description: Array of metrics
      items:
        $ref: '#/components/schemas/Metric'
    Configuration:
      type: object
      description: Configuration
      properties:
        continents:
          type: array
          description: Continents
          items: {}
        countries:
          type: array
          description: Countries
          items: {}
        privateLocations:
          type: array
          description: Private locations managed with beamlit operator
          items: {}
    Continent:
      type: object
      description: Continent
      properties:
        displayName:
          type: string
          description: Continent display name
        name:
          type: string
          description: Continent code
    CoreSpec:
      type: object
      description: Core specification
      properties:
        configurations:
          type: object
          description: Optional configurations for the object
          properties:
            key:
              $ref: '#/components/schemas/SpecConfiguration'
        enabled:
          type: boolean
          description: Enable or disable the agent
        flavors:
          $ref: '#/components/schemas/Flavors'
        integrationConnections:
          $ref: '#/components/schemas/IntegrationConnectionsList'
        podTemplate:
          $ref: '#/components/schemas/PodTemplateSpec'
        policies:
          $ref: '#/components/schemas/PoliciesList'
        privateClusters:
          $ref: '#/components/schemas/ModelPrivateCluster'
          description: The private clusters where the model deployment is deployed
        runtime:
          $ref: '#/components/schemas/Runtime'
        serverlessConfig:
          $ref: '#/components/schemas/ServerlessConfig'
    CoreStatus:
      type: object
      description: Core status
      properties:
        deploymentStatus:
          type: string
          description: The status of the core, can be CREATED, UPDATED, DELETED, DEPLOYED,
            DISABLED, or FAILED
    Country:
      type: object
      description: Configuration
      properties:
        displayName:
          type: string
          description: Country display name
        name:
          type: string
          description: Country code
    Environment:
      type: object
      description: Environment on which deployments will be made (e.g. development,
        production), enforcing multiple policies at once.
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        spec:
          $ref: '#/components/schemas/EnvironmentSpec'
    EnvironmentMetadata:
      type: object
      description: Environment metadata
      allOf:
      - $ref: '#/components/schemas/Metadata'
      - properties:
          environment:
            type: string
            description: Environment name
    EnvironmentMetrics:
      type: object
      description: Metrics for the environment
      properties:
        inferenceGlobal:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests (in last 24 hours) for the environment
            globally
    EnvironmentSpec:
      type: object
      description: Environment specification
      properties:
        policies:
          $ref: '#/components/schemas/PoliciesList'
    Flavor:
      type: object
      description: A type of hardware available for deployments
      properties:
        name:
          type: string
          description: Flavor name (e.g. t4)
        type:
          type: string
          description: Flavor type (e.g. cpu, gpu)
    Flavors:
      type: array
      description: Types of hardware available for deployments
      items:
        $ref: '#/components/schemas/Flavor'
    Function:
      type: object
      description: Function
      properties:
        metadata:
          $ref: '#/components/schemas/EnvironmentMetadata'
        spec:
          $ref: '#/components/schemas/FunctionSpec'
        status:
          $ref: '#/components/schemas/CoreStatus'
    FunctionKit:
      type: object
      description: Function kit
      properties:
        description:
          type: string
          description: Description of the function kit, very important for the agent
            to work with your kit
        name:
          type: string
          description: The kit name, very important for the agent to work with your
            kit
        parameters:
          type: array
          description: Kit parameters, for your kit to be callable with an Agent
          items:
            $ref: '#/components/schemas/StoreFunctionParameter'
    FunctionMetadata:
      type: object
      description: Function metadata
      allOf:
      - $ref: '#/components/schemas/Metadata'
      - properties:
          environment:
            type: string
            description: Environment name
    FunctionRelease:
      type: object
      description: Function release, used to deploy a function from one environment
        to another
      properties:
        from:
          type: string
          description: Origin environment from which the function is released
        to:
          type: string
          description: Destination environment to which the function is released
    FunctionSpec:
      type: object
      description: Function specification
      allOf:
      - $ref: '#/components/schemas/CoreSpec'
      - properties:
          description:
            type: string
            description: Function description, very important for the agent function
              to work with an LLM
          kit:
            type: array
            description: The kit of the function deployment
            items:
              $ref: '#/components/schemas/FunctionKit'
          parameters:
            type: array
            description: Function parameters, for your function to be callable with
              Agent
            items:
              $ref: '#/components/schemas/StoreFunctionParameter'
          storeId:
            type: string
            description: Store id
    FunctionsList:
      type: array
      items:
        type: string
        description: Function name
    IncreaseAndRateMetric:
      type: object
      description: Metrics for resources
      properties:
        inferenceGlobal:
          description: Historical requests for all resources globally
        query:
          description: Number of requests for all resources globally
    IntegrationConfig:
      description: Integration config
      type: object
    IntegrationConnection:
      type: object
      description: Integration Connection
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        spec:
          $ref: '#/components/schemas/IntegrationConnectionSpec'
    IntegrationConnectionConfig:
      type: object
      description: Integration config
    IntegrationConnectionSecret:
      type: object
      description: Integration secret
      properties:
        apiKey:
          type: string
          description: The API key to use for the integration
    IntegrationConnectionSpec:
      type: object
      description: Integration connection specification
      properties:
        config:
          $ref: '#/components/schemas/IntegrationConnectionConfig'
          description: Additional configuration for the integration
        integration:
          type: string
          description: Integration type
        secret:
          $ref: '#/components/schemas/IntegrationConnectionSecret'
          description: Integration secret
    IntegrationConnectionsList:
      type: array
      items:
        type: string
        description: Deployment integration connection name
    IntegrationModel:
      type: object
      description: Model obtained from an external authentication provider, such as
        HuggingFace, OpenAI, etc...
      properties:
        created_at:
          type: string
          description: Provider model created at
        downloads:
          type: integer
          description: Provider model downloads
        id:
          type: string
          description: Provider model ID
        library_name:
          type: string
          description: Provider model library name
        likes:
          type: integer
          description: Provider model likes
        name:
          type: string
          description: Provider model name
        pipeline_tag:
          type: string
          description: Provider model pipeline tag
        private:
          type: boolean
          description: Provider model private
        tags:
          type: array
          description: Provider model tags
          items:
            type: string
        trending_score:
          type: integer
          description: Provider model trending score
    LocationResponse:
      type: object
      description: Location availability for policies
      properties:
        continent:
          type: string
          description: Continent of the location
        country:
          type: string
          description: Country of the location
        flavors:
          type: array
          description: Hardware flavors available in the location
          items:
            $ref: '#/components/schemas/Flavor'
        location:
          type: string
          description: Name of the location
        status:
          type: string
          description: Status of the location
    Metadata:
      type: object
      description: Metadata
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          displayName:
            type: string
            description: Model display name
          labels:
            $ref: '#/components/schemas/MetadataLabels'
          name:
            type: string
            description: Model name
          workspace:
            type: string
            description: Workspace name
    MetadataLabels:
      type: object
      description: Labels
      additionalProperties:
        type: string
    Metric:
      type: object
      description: Metric
      properties:
        timestamp:
          type: string
          description: Metric timestamp
        value:
          type: string
          description: Metric value
    Metrics:
      type: object
      description: Metrics for resources
      allOf:
      - $ref: '#/components/schemas/IncreaseAndRateMetric'
      - properties:
          agents:
            $ref: '#/components/schemas/IncreaseAndRateMetric'
            description: Metrics for agents
          functions:
            $ref: '#/components/schemas/IncreaseAndRateMetric'
            description: Metrics for functions
          models:
            $ref: '#/components/schemas/IncreaseAndRateMetric'
            description: Metrics for models
    Model:
      type: object
      description: Logical object representing a model, that can be instantiated in
        multiple environments as model deployments
      properties:
        metadata:
          $ref: '#/components/schemas/EnvironmentMetadata'
        spec:
          $ref: '#/components/schemas/ModelSpec'
        status:
          $ref: '#/components/schemas/CoreStatus'
    ModelMetadata:
      allOf:
      - $ref: '#/components/schemas/Metadata'
      - properties:
          environment:
            description: Environment name
            type: string
      description: Model metadata
      type: object
    ModelPrivateCluster:
      type: object
      description: Private cluster where the model deployment is deployed
      properties:
        baseUrl:
          type: string
          description: The base url of the model in the private cluster
        enabled:
          type: boolean
          description: If true, the private cluster is available
        name:
          type: string
          description: The name of the private cluster
    ModelProvider:
      type: object
      description: Model provider
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          comment:
            type: string
            description: Model provider description
          config:
            $ref: '#/components/schemas/ProviderConfig'
            description: Additional configuration for the model provider
          displayName:
            type: string
            description: Model provider display name
          labels:
            $ref: '#/components/schemas/MetadataLabels'
          name:
            type: string
            description: Model provider name
          type:
            type: string
            description: Model provider type
          workspace:
            type: string
            description: Workspace name
    ModelProviderName:
      type: string
      description: Model provider name
    ModelRelease:
      type: object
      description: Model release, used to deploy a model from one environment to another
      properties:
        from:
          type: string
          description: Origin environment from which the model is released
        to:
          type: string
          description: Destination environment to which the model is released
    ModelSpec:
      type: object
      description: Model specification
      allOf:
      - $ref: '#/components/schemas/CoreSpec'
      - properties:
          modelProvider:
            $ref: '#/components/schemas/ModelProviderName'
            description: The reference for the origin of the model
    OwnerFields:
      type: object
      description: Owner fields for Persistance
      properties:
        createdBy:
          type: string
          description: The user or service account who created the resource
        updatedBy:
          type: string
          description: The user or service account who updated the resource
    PendingInvitation:
      type: object
      description: Pending invitation in workspace
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          email:
            type: string
            description: User email
          invitedBy:
            type: string
            description: User sub
          role:
            type: string
            description: ACL role
          workspace:
            type: string
            description: Workspace name
    PendingInvitationAccept:
      type: object
      description: Pending invitation accept
      properties:
        email:
          type: string
          description: User email
        workspace:
          $ref: '#/components/schemas/Workspace'
    PendingInvitationRender:
      type: object
      description: Pending invitation in workspace
      properties:
        email:
          type: string
          description: User email
        invitedAt:
          type: string
          description: Invitation date
        invitedBy:
          $ref: '#/components/schemas/PendingInvitationRenderInvitedBy'
        role:
          type: string
          description: ACL role
        workspace:
          $ref: '#/components/schemas/PendingInvitationRenderWorkspace'
        workspaceDetails:
          $ref: '#/components/schemas/PendingInvitationWorkspaceDetails'
    PendingInvitationRenderInvitedBy:
      type: object
      description: Invited by
      properties:
        email:
          type: string
          description: User email
        family_name:
          type: string
          description: User family name
        given_name:
          type: string
          description: User given name
        sub:
          type: string
          description: User sub
    PendingInvitationRenderWorkspace:
      type: object
      description: Workspace
      properties:
        displayName:
          type: string
          description: Workspace display name
        name:
          type: string
          description: Workspace name
    PendingInvitationWorkspaceDetails:
      type: object
      description: Workspace details
      properties:
        emails:
          type: array
          description: List of user emails in the workspace
          items: {}
        user_number:
          type: number
          description: Number of users in the workspace
    PodTemplateSpec:
      description: Pod template specification
      type: object
    PoliciesList:
      type: array
      items:
        type: string
        description: Policy name
    Policy:
      type: object
      description: Rule that controls how a deployment is made and served (e.g. location
        restrictions)
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        spec:
          $ref: '#/components/schemas/PolicySpec'
    PolicyLocation:
      type: object
      description: Policy location
      properties:
        name:
          type: string
          description: Policy location name
        type:
          type: string
          description: Policy location type
    PolicyLocations:
      type: array
      description: PolicyLocations is a local type that wraps a slice of Location
      items:
        $ref: '#/components/schemas/PolicyLocation'
    PolicyResourceType:
      type: string
      description: PolicyResourceType is a type of resource, e.g. model, function,
        etc.
    PolicyResourceTypes:
      type: array
      description: PolicyResourceTypes is a local type that wraps a slice of PolicyResourceType
      items:
        $ref: '#/components/schemas/PolicyResourceType'
    PolicySpec:
      type: object
      description: Policy specification
      properties:
        flavors:
          $ref: '#/components/schemas/Flavors'
          description: Flavors allowed by the policy. If not set, all flavors are
            allowed.
        locations:
          $ref: '#/components/schemas/PolicyLocations'
          description: Locations allowed by the policy. If not set, all locations
            are allowed.
        resourceTypes:
          $ref: '#/components/schemas/PolicyResourceTypes'
          description: ResourceTypes where the policy is applied. If not set, the
            policy is applied to all resource types.
        type:
          type: string
          description: Policy type, can be location or flavor
    PrivateCluster:
      type: object
      description: A private cluster where models can be located on.
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          continent:
            type: string
            description: The private cluster's continent, used to determine the closest
              private cluster to serve inference requests based on the user's location
          country:
            type: string
            description: The country where the private cluster is located, used to
              determine the closest private cluster to serve inference requests based
              on the user's location
          displayName:
            type: string
            description: The private cluster's display Name
          healthy:
            type: boolean
            description: Whether the private cluster is healthy or not, used to determine
              if the private cluster is ready to run inference
          lastHealthCheckTime:
            type: string
            description: The private cluster's unique name
          latitude:
            type: string
            description: The private cluster's latitude, used to determine the closest
              private cluster to serve inference requests based on the user's location
          longitude:
            type: string
            description: The private cluster's longitude, used to determine the closest
              private cluster to serve inference requests based on the user's location
          name:
            type: string
            description: The name of the private cluster, it must be unique
          ownedBy:
            type: string
            description: The service account (operator) that owns the cluster
          workspace:
            type: string
            description: The workspace the private cluster belongs to
    PrivateLocation:
      type: object
      description: Private location available for policies
      properties:
        name:
          type: string
          description: Location name
    ProviderConfig:
      type: object
      description: Model provider config
      properties:
        filename:
          type: string
          description: The file name to use for the model
        presigned_url:
          type: array
          description: The presigned URLs to upload the model to
          items: {}
        runtime:
          $ref: '#/components/schemas/Runtime'
    QPS:
      type: object
      description: Query per second per element, can be per response status code (e.g.
        200, 400) or per location
      properties:
        region_code:
          type: number
          description: QPS for location
    ResourceDeploymentMetrics:
      description: Metrics for a single resource deployment (eg. model deployment,
        function deployment)
      properties:
        inference_per_second_global:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests per second (RPS), for the model deployment
            globally
        inference_per_second_per_region:
          description: Historical requests per second (RPS) per location, for the
            model deployment
          properties:
            region:
              $ref: '#/components/schemas/ArrayMetric'
          type: object
        query_per_second_global:
          description: RPS value (in last 24 hours) for the model deployment globally
          type: number
        query_per_second_per_code_global:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per response status code, for
            the model deployment globally
        query_per_second_per_region:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per location, for the model deployment
        query_per_second_per_region_per_code:
          description: RPS value (in last 24 hours) per response status code per location,
            for the model deployment
          properties:
            region:
              $ref: '#/components/schemas/QPS'
          type: object
      type: object
    ResourceEnvironmentMetrics:
      type: object
      description: Metrics for a single resource deployment (eg. model deployment,
        function deployment)
      properties:
        inferenceGlobal:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests (in last 24 hours) for the model deployment
            globally
        inferencePerRegion:
          type: object
          description: Historical requests (in last 24 hours) per location, for the
            model deployment
          properties:
            region:
              $ref: '#/components/schemas/ArrayMetric'
        query_global:
          type: number
          description: Number of requests done on the resource for the model deployment
        queryPerCodeGlobal:
          $ref: '#/components/schemas/QPS'
          description: Number of requests done on the resource for the model deployment
        queryPerRegion:
          $ref: '#/components/schemas/QPS'
          description: Number of requests done on the resource for the model deployment
        queryPerRegionPerCode:
          type: object
          description: Number of requests done on the resource for the model deployment
          properties:
            region:
              $ref: '#/components/schemas/QPS'
    ResourceLog:
      type: object
      description: Log for a resource deployment (eg. model deployment, function deployment)
      properties:
        message:
          type: string
          description: Content of the log
        timestamp:
          type: string
          description: The timestamp of the log
    ResourceMetrics:
      type: object
      description: Metrics for a single resource (eg. model, function)
      properties:
        inferenceGlobal:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests (in last 24 hours) for the model globally
        queryPerRegion:
          $ref: '#/components/schemas/QPS'
          description: Number of requests done on the resource
    Runtime:
      type: object
      description: Set of configurations for a deployment
      properties:
        args:
          type: array
          description: The arguments to pass to the deployment runtime
          items: {}
        command:
          type: array
          description: The command to run the deployment
          items: {}
        envs:
          type: array
          description: The environment variables to set in the deployment. Should
            be a list of Kubernetes EnvVar types
          items: {}
        image:
          type: string
          description: The Docker image for the deployment
        metricPort:
          type: integer
          description: The port to serve the metrics on
        model:
          type: string
          description: The slug name of the origin model. Only used if the deployment
            is a Deployment
        readinessProbe:
          type: object
          description: The readiness probe. Should be a Kubernetes Probe type
        resources:
          type: object
          description: The resources for the deployment. Should be a Kubernetes ResourceRequirements
            type
        servingPort:
          type: integer
          description: The port to serve the model on
        type:
          type: string
          description: The type of origin for the deployment
    ServerlessConfig:
      type: object
      description: Configuration for a serverless deployment
      properties:
        lastPodRetentionPeriod:
          type: string
          description: The minimum amount of time that the last replica will remain
            active AFTER a scale-to-zero decision is made
        maxNumReplicas:
          type: integer
          description: The maximum number of replicas for the deployment.
        metric:
          type: string
          description: Metric watched to make scaling decisions. Can be "cpu" or "memory"
            or "rps" or "concurrency"
        minNumReplicas:
          type: integer
          description: The minimum number of replicas for the deployment. Can be 0
            or 1 (in which case the deployment is always running in at least one location).
        scaleDownDelay:
          type: string
          description: The time window which must pass at reduced concurrency before
            a scale-down decision is applied. This can be useful, for example, to
            keep containers around for a configurable duration to avoid a cold start
            penalty if new requests come in.
        scaleUpMinimum:
          type: integer
          description: The minimum number of replicas that will be created when the
            deployment scales up from zero.
        stableWindow:
          type: string
          description: The sliding time window over which metrics are averaged to
            provide the input for scaling decisions
        target:
          type: string
          description: Target value for the watched metric
    SpecConfiguration:
      type: object
      description: Configuration, this is a key value storage. In your object you
        can retrieve the value with config[key]
      properties:
        secret:
          type: boolean
          description: ACconfiguration secret
        value:
          type: string
          description: Configuration value
    StoreAgent:
      type: object
      description: Store agent
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          configuration:
            type: array
            description: Store agent configuration
            items:
              $ref: '#/components/schemas/StoreConfiguration'
          description:
            type: string
            description: Store agent description
          displayName:
            type: string
            description: Store agent display name
          image:
            type: string
            description: Store agent image
          labels:
            type: object
            description: Store agent labels
          name:
            type: string
            description: Store agent name
    StoreConfiguration:
      type: object
      description: 'Store configuration for resources (eg: agent, function, etc)'
      properties:
        availableModels:
          type: array
          description: Available models for the configuration
          items:
            type: string
        description:
          type: string
          description: Store configuration description
        displayName:
          type: string
          description: Store configuration display name
        if:
          type: string
          description: 'Conditional rendering for the configuration, example: provider
            === ''openai'''
        name:
          type: string
          description: Store configuration name
        options:
          type: array
          items:
            $ref: '#/components/schemas/StoreConfigurationOption'
        required:
          type: boolean
          description: Store configuration required
        secret:
          type: boolean
          description: Store configuration secret
        type:
          type: string
          description: Store configuration type
    StoreConfigurationOption:
      type: object
      description: Store configuration options for a select type configuration
      properties:
        if:
          type: string
          description: 'Conditional rendering for the configuration option, example:
            provider === ''openai'''
        label:
          type: string
          description: Store configuration option label
        value:
          type: string
          description: Store configuration option value
    StoreFunction:
      type: object
      description: Store function
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          configuration:
            type: array
            description: Store function configuration
            items:
              $ref: '#/components/schemas/StoreConfiguration'
          description:
            type: string
            description: Store function description
          displayName:
            type: string
            description: Store function display name
          image:
            type: string
            description: Store function image
          kit:
            type: array
            description: Store function kit
            items:
              $ref: '#/components/schemas/StoreFunctionKit'
          labels:
            type: object
            description: Store function labels
          name:
            type: string
            description: Store function name
          parameters:
            type: array
            description: Store function parameters
            items:
              $ref: '#/components/schemas/StoreFunctionParameter'
    StoreFunctionKit:
      type: object
      description: Store function kit
      properties:
        description:
          type: string
          description: Description of the function kit, very important for the agent
            to work with your kit
        name:
          type: string
          description: The kit name, very important for the agent to work with your
            kit
        parameters:
          type: array
          description: Kit parameters, for your kit to be callable with an Agent
          items:
            $ref: '#/components/schemas/StoreFunctionParameter'
    StoreFunctionParameter:
      type: object
      description: Store function parameter
      properties:
        description:
          type: string
          description: Store function parameter description
        name:
          type: string
          description: Store function parameter name
        required:
          type: boolean
          description: Store function parameter required
        type:
          type: string
          description: Store function parameter type
    TimeFields:
      type: object
      description: Time fields for Persistance
      properties:
        createdAt:
          type: string
          description: The date and time when the resource was created
        updatedAt:
          type: string
          description: The date and time when the resource was updated
    TraceIdsResponse:
      description: Response containing trace IDs
      properties:
        trace_ids:
          description: List of trace IDs
          items:
            type: string
          type: array
      type: object
    WebsocketChannel:
      type: object
      description: WebSocket connection details
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - properties:
          connection_id:
            type: string
            description: Unique connection ID
          workspace:
            type: string
            description: Workspace the connection belongs to
    Workspace:
      type: object
      description: Workspace
      allOf:
      - $ref: '#/components/schemas/TimeFields'
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          displayName:
            type: string
            description: Workspace display name
          labels:
            type: object
            description: Workspace labels
          name:
            type: string
            description: Workspace name
          region:
            type: string
            description: Workspace write region
    WorkspaceUser:
      type: object
      description: Workspace user
      properties:
        accepted:
          type: boolean
          description: Whether the user has accepted the workspace invitation
        email:
          type: string
          description: Workspace user email
        email_verified:
          type: boolean
          description: Whether the user's email has been verified
        family_name:
          type: string
          description: Workspace user family name
        given_name:
          type: string
          description: Workspace user given name
        role:
          type: string
          description: Workspace user role
        sub:
          type: string
          description: Workspace user identifier
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  title: Beamlit Control Plane
  version: 0.0.1
openapi: 3.0.3
paths:
  /agents:
    get:
      operationId: ListAgents
      parameters:
      - description: Environment to filter agents by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Agent'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agents:list
      summary: List all agents
      tags:
      - agents
    post:
      operationId: CreateAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: successful operation
      security:
      - BearerAuth:
        - agents:create
      summary: Create agent by name
      tags:
      - agents
  /agents/{agentName}:
    delete:
      operationId: DeleteAgent
      parameters:
      - description: Environment of the model
        in: query
        name: environment
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: successful operation
      security:
      - BearerAuth:
        - agents:delete
      summary: Delete agent by name
      tags:
      - agents
    get:
      operationId: GetAgent
      parameters:
      - description: Environment to filter agents by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: successful operation
      security:
      - BearerAuth:
        - agents:get
      summary: Get agent by name
      tags:
      - agents
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
    put:
      operationId: UpdateAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: successful operation
      security:
      - BearerAuth:
        - agents:update
      summary: Update agent by name
      tags:
      - agents
  /agents/{agentName}/history:
    get:
      operationId: ListAgentHistory
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentHistory'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agent_history:list
      tags:
      - agents
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
  /agents/{agentName}/history/{requestId}:
    delete:
      operationId: DeleteAgentHistory
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentHistory'
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployment_history:delete
      tags:
      - agents
    get:
      operationId: GetAgentHistory
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentHistory'
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployment_history:get
      tags:
      - agents
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
    - description: Request ID
      in: path
      name: requestId
      required: true
      schema:
        type: string
    put:
      operationId: PutAgentHistory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentHistory'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentHistory'
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployment_history:update
      summary: Update agent's history by request ID
      tags:
      - agents
  /agents/{agentName}/logs:
    get:
      operationId: GetAgentEnvironmentLogs
      parameters:
      - description: Name of the agent
        in: path
        name: agentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResourceLog'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployments_logs:read
      tags:
      - agents
  /agents/{agentName}/metrics:
    get:
      operationId: GetAgentMetrics
      parameters:
      - description: Name of the agent
        in: path
        name: agentName
        required: true
        schema:
          type: string
      - description: Environment to filter agents by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - agent_metrics:read
      summary: Get agent metrics
      tags:
      - agents
  /agents/{agentName}/release:
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
    post:
      operationId: CreateAgentRelease
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRelease'
          description: successful operation
      security:
      - BearerAuth:
        - agent_releases:create
      summary: Create release for a agent from an environment
      tags:
      - agents
  /agents/{agentName}/traces:
    get:
      operationId: GetAgentTraceIds
      parameters:
      - description: Name of the agent
        in: path
        name: agentName
        required: true
        schema:
          type: string
      - description: Environment to filter agents by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceIdsResponse'
          description: successful operation
      security:
      - BearerAuth:
        - agent_traces:read
      summary: Get agent trace IDs
      tags:
      - agents
  /configuration:
    get:
      operationId: GetConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
          description: Configuration of the control plane
      security:
      - BearerAuth:
        - configurations:list
      summary: List all configurations
      tags:
      - configurations
  /environments:
    get:
      description: Returns a list of all environments in the workspace.
      operationId: ListEnvironments
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Environment'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - environments:list
      summary: List environments
      tags:
      - environments
    post:
      description: Creates an environment.
      operationId: CreateEnvironment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: successful operation
      security:
      - BearerAuth:
        - environments:create
      summary: Create environment
      tags:
      - environments
  /environments/{environmentName}:
    delete:
      description: Deletes an environment by name.
      operationId: DeleteEnvironment
      parameters:
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: successful operation
      security:
      - BearerAuth:
        - environments:delete
      summary: Delete environment
      tags:
      - environments
    get:
      description: Returns an environment by name.
      operationId: GetEnvironment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: successful operation
      security:
      - BearerAuth:
        - environments:get
      summary: Get environment
      tags:
      - environments
    parameters:
    - description: Name of the environment
      in: path
      name: environmentName
      required: true
      schema:
        type: string
    put:
      description: Updates an environment.
      operationId: UpdateEnvironment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: successful operation
      security:
      - BearerAuth:
        - environments:update
      summary: Update environment
      tags:
      - environments
  /environments/{environmentName}/metrics:
    get:
      description: Returns metrics for an environment by name.
      operationId: GetEnvironmentMetrics
      parameters:
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - environments_metrics:get
      summary: Get environment metrics
      tags:
      - environments
  /functions:
    get:
      operationId: ListFunctions
      parameters:
      - description: Environment to filter functions by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Function'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - functions:list
      summary: List all functions
      tags:
      - functions
    post:
      operationId: CreateFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Function'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: successful operation
      security:
      - BearerAuth:
        - functions:create
      summary: Create function
      tags:
      - functions
  /functions/{functionName}:
    delete:
      operationId: DeleteFunction
      parameters:
      - description: Environment of the model
        in: query
        name: environment
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: successful operation
      security:
      - BearerAuth:
        - functions:delete
      summary: Delete function by name
      tags:
      - functions
    get:
      operationId: GetFunction
      parameters:
      - description: Environment to filter functions by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: successful operation
      security:
      - BearerAuth:
        - functions:get
      summary: Get function by name
      tags:
      - functions
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
    put:
      operationId: UpdateFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Function'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: successful operation
      security:
      - BearerAuth:
        - functions:update
      summary: Update function by name
      tags:
      - functions
  /functions/{functionName}/logs:
    get:
      operationId: GetFunctionEnvironmentLogs
      parameters:
      - description: Name of the function
        in: path
        name: functionName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResourceLog'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - function_deployments_logs:read
      tags:
      - functions
  /functions/{functionName}/metrics:
    get:
      operationId: GetFunctionMetrics
      parameters:
      - description: Name of the function
        in: path
        name: functionName
        required: true
        schema:
          type: string
      - description: Environment to filter functions by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - function_metrics:read
      summary: Get function metrics
      tags:
      - functions
  /functions/{functionName}/release:
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
    post:
      operationId: CreateFunctionRelease
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionRelease'
          description: successful operation
      security:
      - BearerAuth:
        - function_releases:create
      summary: Create release for a function from an environment
      tags:
      - functions
  /functions/{functionName}/traces:
    get:
      operationId: GetFunctionTraceIds
      parameters:
      - description: Name of the function
        in: path
        name: functionName
        required: true
        schema:
          type: string
      - description: Environment to filter function by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceIdsResponse'
          description: successful operation
      security:
      - BearerAuth:
        - function_traces:read
      summary: Get function trace IDs
      tags:
      - functions
  /history/agents:
    get:
      description: Get all history for all agents
      operationId: ListAgentsHistory
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentHistory'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployment_history:list
      tags:
      - history
  /history/agents/{requestId}:
    get:
      description: Get all history for a specific request ID from all agents
      operationId: GetAgentsHistory
      parameters:
      - description: Request ID of the agent history
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentHistory'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployment_history:list
      tags:
      - history
  /integrations/{integrationName}:
    get:
      description: Returns integration information by name.
      operationId: GetIntegration
      parameters:
      - description: Name of the integration
        in: path
        name: integrationName
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth:
        - integrations:list
      summary: List integrations connections
      tags:
      - integrations
  /integrations/{integrationName}/models:
    get:
      description: Returns a list of all models for an integration.
      operationId: ListIntegrationModels
      parameters:
      - description: Name of the integration
        in: path
        name: integrationName
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth:
        - integrations:list
      summary: List integration models
      tags:
      - integrations
  /integrations/{integrationName}/models/{modelId}:
    get:
      description: Returns a model for an integration by ID.
      operationId: GetIntegrationModel
      parameters:
      - description: Name of the integration
        in: path
        name: integrationName
        required: true
        schema:
          type: string
      - description: Model ID
        in: path
        name: modelId
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth:
        - integrations:list
      summary: Get integration model
      tags:
      - integrations
  /integrations/connections:
    get:
      description: Returns a list of all connections integrations in the workspace.
      operationId: ListIntegrationConnections
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IntegrationConnection'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - integrations:list
      summary: List integrations connections
      tags:
      - integrations
    post:
      description: Create a connection for an integration.
      operationId: CreateIntegrationConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationConnection'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationConnection'
          description: successful operation
      security:
      - BearerAuth:
        - integrations:create
      summary: Create integration
      tags:
      - integrations
  /integrations/connections/{connectionName}:
    delete:
      description: Deletes an integration connection by integration name and connection
        name.
      operationId: DeleteIntegrationConnection
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationConnection'
          description: successful operation
      summary: Delete integration
      tags:
      - integrations
    get:
      description: Returns an integration connection by integration name and connection
        name.
      operationId: GetIntegrationConnection
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationConnection'
          description: successful operation
      summary: Get integration
      tags:
      - integrations
    parameters:
    - description: Name of the integrationconnection
      in: path
      name: connectionName
      required: true
      schema:
        type: string
    put:
      description: Update an integration connection by integration name and connection
        name.
      operationId: UpdateIntegrationConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationConnection'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationConnection'
          description: successful operation
      summary: Update integration connection
      tags:
      - integrations
  /integrations/connections/{connectionName}/models:
    get:
      description: Returns a list of all models for an integration connection.
      operationId: ListIntegrationConnectionModels
      parameters:
      - description: Name of the connection
        in: path
        name: connectionName
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth:
        - integrations:list
      summary: List integration connection models
      tags:
      - integrations
  /integrations/connections/{connectionName}/models/{modelId}:
    get:
      description: Returns a model for an integration connection by ID.
      operationId: GetIntegrationConnectionModel
      parameters:
      - description: Name of the connection
        in: path
        name: connectionName
        required: true
        schema:
          type: string
      - description: Model ID
        in: path
        name: modelId
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth:
        - integrations:list
      summary: List integration connection models
      tags:
      - integrations
  /locations:
    get:
      description: Returns a list of all locations available with status.
      operationId: ListLocations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LocationResponse'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - locations:list
      summary: List locations
      tags:
      - locations
  /metrics:
    get:
      description: Returns metrics for the workspace's deployments.
      operationId: GetMetrics
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
          description: successful operation
      security:
      - BearerAuth:
        - metrics:get
      summary: Get metrics for a workspace
      tags:
      - metrics
  /model_providers:
    get:
      description: Returns a list of all integrations in the workspace.
      operationId: ListModelProviders
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ModelProvider'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:list
      summary: List model providers
      tags:
      - model_providers
    post:
      description: Create an integration.
      operationId: CreateModelProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelProvider'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:create
      summary: Create model provider
      tags:
      - model_providers
  /model_providers/{modelProviderName}:
    delete:
      description: Deletes an integration by ID.
      operationId: DeleteModelProvider
      parameters:
      - description: Name of the model provider
        in: path
        name: modelProviderName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:delete
      summary: Delete model provider
      tags:
      - model_providers
    get:
      description: Returns an integration by ID.
      operationId: GetModelProvider
      parameters:
      - description: Name of the model provider
        in: path
        name: modelProviderName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:get
      summary: Get model provider
      tags:
      - model_providers
    put:
      description: Update an integration by ID.
      operationId: UpdateModelProvider
      parameters:
      - description: Name of the model provider
        in: path
        name: modelProviderName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelProvider'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:update
      summary: Update model provider
      tags:
      - model_providers
  /models:
    get:
      description: Returns a list of all models in the workspace.
      operationId: ListModels
      parameters:
      - description: Environment of the model
        in: query
        name: environment
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Model'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - models:list
      summary: List models
      tags:
      - models
    post:
      description: Creates a model.
      operationId: CreateModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: successful operation
      security:
      - BearerAuth:
        - models:create
      summary: Create model
      tags:
      - models
  /models/{modelName}:
    delete:
      description: Deletes a model by name.
      operationId: DeleteModel
      parameters:
      - description: Environment of the model
        in: query
        name: environment
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: successful operation
      security:
      - BearerAuth:
        - models:delete
      summary: Delete model
      tags:
      - models
    get:
      description: Returns a model by name.
      operationId: GetModel
      parameters:
      - description: Environment of the model
        in: query
        name: environment
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: successful operation
      security:
      - BearerAuth:
        - models:get
      summary: Get model
      tags:
      - models
    parameters:
    - description: Name of the model
      in: path
      name: modelName
      required: true
      schema:
        type: string
    put:
      description: Update a model by name.
      operationId: UpdateModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: successful operation
      security:
      - BearerAuth:
        - models:update
      summary: Create or update model
      tags:
      - models
  /models/{modelName}/logs:
    get:
      description: Returns logs for a model deployment by name.
      operationId: GetModelEnvironmentLogs
      parameters:
      - description: Name of the model
        in: path
        name: modelName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResourceLog'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - model_deployments_logs:read
      tags:
      - models
  /models/{modelName}/metrics:
    get:
      description: Returns metrics for a model by name.
      operationId: GetModelMetrics
      parameters:
      - description: Name of the model
        in: path
        name: modelName
        required: true
        schema:
          type: string
      - description: Environment of the model
        in: query
        name: environment
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - model_metrics:read
      summary: Get model metrics
      tags:
      - models
  /models/{modelName}/release:
    parameters:
    - description: Name of the model
      in: path
      name: modelName
      required: true
      schema:
        type: string
    post:
      description: Make a release for a model from an environment to another.
      operationId: ReleaseModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelRelease'
          description: successful operation
      security:
      - BearerAuth:
        - model_releases:create
      summary: Release model from an environment
      tags:
      - models
  /models/{modelName}/traces:
    get:
      operationId: GetModelTraceIds
      parameters:
      - description: Name of the model
        in: path
        name: modelName
        required: true
        schema:
          type: string
      - description: Environment to filter models by
        in: query
        name: environment
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceIdsResponse'
          description: successful operation
      security:
      - BearerAuth:
        - model_traces:read
      summary: Get model trace IDs
      tags:
      - models
  /policies:
    get:
      description: Returns a list of all policies in the workspace.
      operationId: ListPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Policy'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - policies:list
      summary: List policies
      tags:
      - policies
    post:
      description: Creates a policy.
      operationId: CreatePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: successful operation
      security:
      - BearerAuth:
        - policies:create
      summary: Create policy
      tags:
      - policies
  /policies/{policyName}:
    delete:
      description: Deletes a policy by name.
      operationId: DeletePolicy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: successful operation
      security:
      - BearerAuth:
        - policies:delete
      summary: Delete policy
      tags:
      - policies
    get:
      description: Returns a policy by name.
      operationId: GetPolicy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: successful operation
      security:
      - BearerAuth:
        - policies:get
      summary: Get policy
      tags:
      - policies
    parameters:
    - description: Name of the policy
      in: path
      name: policyName
      required: true
      schema:
        type: string
    put:
      description: Updates a policy.
      operationId: UpdatePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: successful operation
      security:
      - BearerAuth:
        - policies:update
      summary: Update policy
      tags:
      - policies
  /privateclusters:
    get:
      operationId: ListPrivateClusters
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PrivateCluster'
                type: array
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: Forbidden
        "404":
          description: workspace not found
      security:
      - BearerAuth:
        - privateclusters:list
      summary: List all private clusters
      tags:
      - privateclusters
    post:
      operationId: CreatePrivateCluster
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateCluster'
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: Forbidden
      security:
      - BearerAuth:
        - privateclusters:create
      summary: Create private cluster
      tags:
      - privateclusters
  /privateclusters/{privateClusterName}:
    delete:
      operationId: DeletePrivateCluster
      parameters:
      - description: Name of the private cluster
        in: path
        name: privateClusterName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateCluster'
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: Forbidden
      security:
      - BearerAuth:
        - privateclusters:delete
      summary: Delete private cluster
      tags:
      - privateclusters
    get:
      operationId: GetPrivateCluster
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateCluster'
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: Forbidden
        "404":
          description: private cluster not found
      security:
      - BearerAuth:
        - privateclusters:get
      summary: Get private cluster by name
      tags:
      - privateclusters
    parameters:
    - description: Name of the private cluster
      in: path
      name: privateClusterName
      required: true
      schema:
        type: string
    put:
      operationId: UpdatePrivateCluster
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateCluster'
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: Forbidden
      security:
      - BearerAuth:
        - privateclusters:update
      summary: Update private cluster
      tags:
      - privateclusters
  /privateclusters/{privateClusterName}/health:
    get:
      operationId: GetPrivateClusterHealth
      responses:
        "200":
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: Forbidden
      summary: Get private cluster health
      tags:
      - privateclusters
    parameters:
    - description: Name of the private cluster
      in: path
      name: privateClusterName
      required: true
      schema:
        type: string
    post:
      operationId: UpdatePrivateClusterHealth
      parameters:
      - description: Name of the private cluster
        in: path
        name: privateClusterName
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: Forbidden
      summary: Update private cluster health
      tags:
      - privateclusters
  /profile/invitations:
    get:
      description: Returns a list of all pending invitations in the workspace.
      operationId: ListAllPendingInvitations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PendingInvitationRender'
                type: array
          description: successful operation
        "404":
          description: no pending invitations
      security:
      - BearerAuth:
        - invitations:list
      summary: List pending invitations
      tags:
      - invitations
  /service_accounts:
    get:
      description: Returns a list of all service accounts in the workspace.
      operationId: GetWorkspaceServiceAccounts
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    client_id:
                      description: Service account client ID
                      type: string
                    created_at:
                      description: Creation timestamp
                      type: string
                    description:
                      description: Service account description
                      type: string
                    name:
                      description: Service account name
                      type: string
                    updated_at:
                      description: Last update timestamp
                      type: string
                  type: object
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:get
      summary: Get workspace service accounts
      tags:
      - service_accounts
    post:
      description: Creates a service account in the workspace.
      operationId: CreateWorkspaceServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Service account description
                  type: string
                name:
                  description: Service account name
                  type: string
              required:
              - name
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    description: Service account client ID
                    type: string
                  client_secret:
                    description: Service account client secret (only returned on creation)
                    type: string
                  created_at:
                    description: Creation timestamp
                    type: string
                  description:
                    description: Service account description
                    type: string
                  name:
                    description: Service account name
                    type: string
                  updated_at:
                    description: Last update timestamp
                    type: string
                type: object
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Create workspace service account
      tags:
      - service_accounts
  /service_accounts/{clientId}:
    delete:
      description: Deletes a service account.
      operationId: DeleteWorkspaceServiceAccount
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    description: Service account client ID
                    type: string
                  created_at:
                    description: Creation timestamp
                    type: string
                  description:
                    description: Service account description
                    type: string
                  name:
                    description: Service account name
                    type: string
                  updated_at:
                    description: Last update timestamp
                    type: string
                type: object
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Delete workspace service account
      tags:
      - service_accounts
    put:
      description: Updates a service account.
      operationId: UpdateWorkspaceServiceAccount
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Service account description
                  type: string
                name:
                  description: Service account name
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    description: Service account client ID
                    type: string
                  created_at:
                    description: Creation timestamp
                    type: string
                  description:
                    description: Service account description
                    type: string
                  name:
                    description: Service account name
                    type: string
                  updated_at:
                    description: Last update timestamp
                    type: string
                type: object
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Update workspace service account
      tags:
      - service_accounts
  /service_accounts/{clientId}/api_keys:
    get:
      description: Returns a list of all API keys for a service account.
      operationId: ListApiKeysForServiceAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - apiKey:list
      summary: List API keys for service account
      tags:
      - service_accounts
    parameters:
    - description: Client ID
      in: path
      name: clientId
      required: true
      schema:
        type: string
    post:
      description: Creates an API key for a service account.
      operationId: CreateApiKeyForServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              properties:
                expires_in:
                  description: Expiration period for the API key
                  type: string
                name:
                  description: Name for the API key
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: successful operation
      security:
      - BearerAuth:
        - apiKey:write
      summary: Create API key for service account
      tags:
      - service_accounts
  /service_accounts/{clientId}/api_keys/{apiKeyId}:
    delete:
      description: Deletes an API key for a service account.
      operationId: DeleteApiKeyForServiceAccount
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth:
        - apiKey:write
      summary: Delete API key for service account
      tags:
      - service_accounts
    parameters:
    - description: Client ID
      in: path
      name: clientId
      required: true
      schema:
        type: string
    - description: Api key id
      in: path
      name: apiKeyId
      required: true
      schema:
        type: string
  /store/agents:
    get:
      operationId: ListStoreAgents
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoreAgent'
                type: array
          description: successful operation
      summary: List all store agent
      tags:
      - store
  /store/agents/{agentName}:
    get:
      operationId: GetStoreAgent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreAgent'
          description: successful operation
      summary: Get store agent by name
      tags:
      - store
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
  /store/functions:
    get:
      operationId: ListStoreFunctions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoreFunction'
                type: array
          description: successful operation
      summary: List all store agent functions
      tags:
      - store
  /store/functions/{functionName}:
    get:
      operationId: GetStoreFunction
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreFunction'
          description: successful operation
      summary: Get store agent function by name
      tags:
      - store
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
  /traces:
    get:
      operationId: GetTraceIds
      parameters:
      - in: query
        name: workloadId
        required: false
        schema:
          type: string
      - in: query
        name: workloadType
        required: false
        schema:
          type: string
      - in: query
        name: environment
        required: false
        schema:
          type: string
      - in: query
        name: limit
        required: false
        schema:
          type: string
      - in: query
        name: startTime
        required: false
        schema:
          type: string
      - in: query
        name: endTime
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
      security:
      - BearerAuth:
        - member
      summary: Get trace IDs
  /traces/{traceId}:
    get:
      operationId: GetTrace
      parameters:
      - in: path
        name: traceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
      security:
      - BearerAuth:
        - member
      summary: Get trace by ID
  /traces/{traceId}/logs:
    get:
      operationId: GetTraceLogs
      parameters:
      - in: path
        name: traceId
        required: true
        schema:
          type: string
      - in: query
        name: spanId
        required: false
        schema:
          type: string
      - in: query
        name: limit
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
      security:
      - BearerAuth:
        - member
      summary: Get trace logs
  /users:
    get:
      description: Returns a list of all users in the workspace.
      operationId: ListWorkspaceUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkspaceUser'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:list
      summary: List users in workspace
      tags:
      - workspaces
    post:
      description: Invites a user to the workspace by email.
      operationId: InviteWorkspaceUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  format: email
                  type: string
              type: object
        description: Email of the user to invite
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingInvitation'
          description: successful operation
        "400":
          description: invalid email format
        "404":
          description: workspace not found
      security:
      - BearerAuth:
        - workspaces:invite
      summary: Invite user to workspace
      tags:
      - workspaces
  /users/{subOrEmail}:
    delete:
      description: Removes a user from the workspace (or revokes an invitation if
        the user has not accepted the invitation yet).
      operationId: RemoveWorkspaceUser
      parameters:
      - description: Sub or email of the user
        in: path
        name: subOrEmail
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User successfully removed or invitation revoked
        "404":
          description: Workspace or user not found
      security:
      - BearerAuth:
        - workspaces:remove
      summary: Remove user from workspace or revoke invitation
      tags:
      - workspaces
    put:
      description: Updates the role of a user in the workspace.
      operationId: UpdateWorkspaceUserRole
      parameters:
      - description: Sub or email of the user
        in: path
        name: subOrEmail
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                role:
                  description: The new role to assign to the user
                  type: string
              required:
              - role
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUser'
          description: User role updated successfully
        "400":
          description: Invalid role provided
        "404":
          description: Workspace or user not found
      security:
      - BearerAuth:
        - workspaces:update
      summary: Update user role in workspace
      tags:
      - workspaces
  /workspaces:
    get:
      description: Returns a list of all workspaces.
      operationId: ListWorkspaces
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workspace'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:list
      summary: List workspaces
      tags:
      - workspaces
    post:
      description: Creates a workspace.
      operationId: CreateWorspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:create
      summary: Create worspace
      tags:
      - workspaces
  /workspaces/{workspaceName}:
    delete:
      description: Deletes a workspace by name.
      operationId: DeleteWorkspace
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:delete
      summary: Delete workspace
      tags:
      - workspaces
    get:
      description: Returns a workspace by name.
      operationId: GetWorkspace
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:get
      summary: Get workspace
      tags:
      - workspaces
    put:
      description: Updates a workspace by name.
      operationId: UpdateWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Update workspace
      tags:
      - workspaces
  /workspaces/{workspaceName}/decline:
    post:
      description: Declines an invitation to a workspace.
      operationId: DeclineWorkspaceInvitation
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingInvitation'
          description: Invitation successfully declined
      security:
      - BearerAuth:
        - workspaces:decline
      summary: Decline invitation to workspace
      tags:
      - workspaces
  /workspaces/{workspaceName}/join:
    post:
      description: Accepts an invitation to a workspace.
      operationId: AcceptWorkspaceInvitation
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingInvitationAccept'
          description: Invitation successfully accepted
        "404":
          description: Workspace or invitation not found
      security:
      - BearerAuth:
        - workspaces:accept
      summary: Accept invitation to workspace
      tags:
      - workspaces
  /workspaces/{workspaceName}/leave:
    delete:
      description: Leaves a workspace.
      operationId: LeaveWorkspace
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: Workspace successfully left
        "404":
          description: Workspace not found
      security:
      - BearerAuth:
        - workspaces:leave
      summary: Leave workspace
      tags:
      - workspaces
security:
- BearerAuth:
  - admin
servers:
- description: Beamlit dev control Plane
  url: https://api.beamlit.dev/v0
- description: Beamlit dev inference
  url: https://run.beamlit.dev
